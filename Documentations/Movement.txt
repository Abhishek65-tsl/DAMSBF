Overview of the Successful Workflow

A proper branch hierarchy (feature branches → development → qa → production)
Branch protection rules to enforce code review
Automated CI/CD pipelines that trigger on specific branch events
Proper deployment to GitHub Pages from the production branch


1. Branch Structure and Flow
feature/developer-name/feature-description → development → qa → production → gh-pages (deployment)

This structure works because:

Isolation: Each developer works in isolated feature branches
Integration: Changes are integrated in development first
Testing: QA branch serves as a pre-production testing environment
Deployment: Only approved changes reach production and trigger deployment

2.GitHub Actions YAML Files

1. CI Workflow (ci.yml)
Purpose: This file runs quality checks (linting, potentially tests) on:

Every push to development and qa branches
Every pull request to development, qa, and production branches
This ensures code quality at each integration point.

2. CD Workflow (cd.yml)
Purpose: This file handles deployment and only triggers when code is pushed to the production branch. It:

Checks out the code
Sets up Node.js
Installs dependencies
Builds the project
Deploys to the gh-pages branch

-----------------------------------------------------------------------
Current Active Workflow Files
You are now using the newer workflow files that we set up:

development-ci.yml: Runs tests and linting on the development branch
qa-ci-cd.yml: Runs tests and deploys to a QA environment
production-deploy.yml: Deploys to GitHub Pages when changes reach production

Your original CI.yml and CD.yml files: still in the repository Are not actively running because:
They were configured to trigger on the master branch
GitHub Actions only runs workflows that match the trigger condition

---------------------------------------------------------------------------
